/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GeneralGUIComponents;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
/**
 *
 * @author dk1109
 */
public class SliderControl extends javax.swing.JPanel {
    private int maxValue_ = 100;
    private int minValue_ = 0;
    private int value_ = (int) ((maxValue_ - minValue_)/2);
    private PropertyChangeSupport changes = new PropertyChangeSupport(this);
    
    /**
     * Creates new form SliderControl
     */
    public SliderControl() {
        initComponents();
        jLabel1.setText("Default slider control");
        setValue((int) ((maxValue_ - minValue_)/2));
    }
    
    public SliderControl(String label) {
        initComponents();
        jLabel1.setText(label);
        setValue((int) ((maxValue_ - minValue_)/2));
    }
    
    public SliderControl(String label, int minVal, int maxVal, int defaultVal){
        initComponents();
        jLabel1.setText(label);
        minValue_ = minVal;
        maxValue_ = maxVal;
        value_ = defaultVal;
        setMaxValue(maxVal);
        setMinValue(minVal);
        setValue(defaultVal);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        jLabel1.setText("jLabel1");

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jTextField1.setText("50");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        int oldval = value_;
        value_ = jSlider1.getValue();
        jTextField1.setText(String.valueOf(value_));
        changes.firePropertyChange("SliderVal", oldval, value_);
    }//GEN-LAST:event_jSlider1StateChanged

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        int oldval = value_;
        if (Double.parseDouble(jTextField1.getText()) < minValue_)
            jTextField1.setText(String.valueOf(minValue_));
        else if (Double.parseDouble(jTextField1.getText()) > maxValue_)
            jTextField1.setText(String.valueOf(maxValue_));
        
        value_ = (int) Double.parseDouble(jTextField1.getText());
        jSlider1.setValue(value_);
        changes.firePropertyChange("SliderVal", oldval, value_);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    public void setValue(int val){
        jTextField1.setText(String.valueOf(val));
        jSlider1.setValue((val));
        value_ = val;
    }
    
    public Double getValue(){
        return Double.parseDouble(jTextField1.getText());
    }
    
    public void setLabel(String labelText){
        jLabel1.setText(labelText);
    }
    
    public String getLabel(){
        return jLabel1.getText();
    }
    
    public void setMaxValue(int val){
        maxValue_ = val;
        jSlider1.setMaximum(val);
    }
    
    public int getMaxValue(){
        return maxValue_;
    }
    
    public void setMinValue(int val){
        minValue_ = val;
        jSlider1.setMinimum(val);
    }
    
    public int getMinValue(){
        return minValue_;
    }
    
    @Override
    public void addPropertyChangeListener(PropertyChangeListener l) {
        changes.addPropertyChangeListener(l);
    }

    @Override
    public void removePropertyChangeListener(PropertyChangeListener l) {
        changes.removePropertyChangeListener(l);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables


}
